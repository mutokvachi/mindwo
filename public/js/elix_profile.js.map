{"version":3,"sources":["freeform.js","inlineform.js","empl_links_fix.js","personal_docs.js","notes.js"],"names":[],"mappingsajafile":"elix_profile.js","sourcesContent":["(function($)\n{\n\t/**\n\t * FreeForm - a jQuery plugin for working with arbitrary forms\n\t *\n\t * @param root\n\t * @returns {*}\n\t * @constructor\n\t */\n\t$.fn.FreeForm = function(opts)\n\t{\n\t\tvar options = $.extend({}, $.fn.FreeForm.defaults, opts);\n\t\t\n\t\treturn this.each(function()\n\t\t{\n\t\t\tnew $.FreeForm(this, options);\n\t\t});\n\t};\n\t\n\t$.fn.FreeForm.defaults = {\n\t\teditBtnSelector: '.dx-edit-general',\n\t\tsaveBtnSelector: '.dx-save-general',\n\t\tcancelBtnSelector: '.dx-cancel-general',\n\t\tnames: []\n\t};\n\t\n\t/**\n\t * FreeForm constructor\n\t *\n\t * @param root\n\t * @constructor\n\t */\n\t$.FreeForm = function(root, opts)\n\t{\n\t\t// store object instance along with a root DOM element\n\t\t$.data(root, 'FreeForm', this);\n\t\t\n\t\tvar self = this;\n\t\tthis.root = $(root);\n\t\tthis.options = opts;\n\t\tthis.fields = $('[data-name]', this.root).filter(function()\n\t\t{\n\t\t\tif(self.options.names.length == 0 || self.options.names.indexOf($(this).data('name')) != -1)\n\t\t\t\treturn true;\n\t\t});\n\t\tthis.originalData = {};\n\t\tthis.editButton = $(this.options.editBtnSelector, this.root);\n\t\tthis.saveButton = $(this.options.saveBtnSelector, this.root);\n\t\tthis.cancelButton = $(this.options.cancelBtnSelector, this.root);\n\t\t\n\t\t// Bind callbacks to buttons\n\t\tthis.editButton.click(function() { self.edit(); });\n\t\tthis.saveButton.click(function() { self.save(); });\n\t\tthis.cancelButton.click(function() { self.cancel(); });\n\t};\n\t\n\t/**\n\t * FreeForm methods\n\t */\n\t$.extend($.FreeForm.prototype, {\n\t\t/**\n\t\t * Replace HTML with form input fields\n\t\t */\n\t\tedit: function()\n\t\t{\n\t\t\tvar self = this;\n\t\t\t\n\t\t\t// a structure for JSON request\n\t\t\tvar request = {\n\t\t\t\tmodel: this.root.data('model'),\n\t\t\t\titem_id: this.root.data('item_id'),\n\t\t\t\tlist_id: this.root.data('list_id'),\n\t\t\t\tfields: []\n\t\t\t};\n\t\t\t\n\t\t\t// collect names of input fields marked with data-name attribute\n\t\t\tthis.fields.each(function()\n\t\t\t{\n\t\t\t\tself.originalData[$(this).data('name')] = $(this).html();\n\t\t\t\trequest.fields.push({\n\t\t\t\t\tname: $(this).data('name'),\n\t\t\t\t\tdisplay: ($(this).data('display') ? $(this).data('display') : 'raw')\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\tshow_page_splash(1);\n\t\t\t\n\t\t\t// perform a request to the server\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: DX_CORE.site_url + 'freeform/' + request.item_id + '/edit',\n\t\t\t\tdataType: 'json',\n\t\t\t\tdata: request,\n\t\t\t\tsuccess: function(data)\n\t\t\t\t{\n\t\t\t\t\tif(typeof data.success != \"undefined\" && data.success == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnotify_err(data.error);\n\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tself.editButton.hide();\n\t\t\t\t\tself.saveButton.show();\n\t\t\t\t\tself.cancelButton.show();\n\t\t\t\t\t\n\t\t\t\t\t// replace original html content of marked elements with input fields\n\t\t\t\t\tfor(var i = 0; i < data.fields.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar name = data.fields[i].name;\n\t\t\t\t\t\tvar input = data.fields[i].input;\n\t\t\t\t\t\tvar elem = $('[data-name=\"' + name + '\"]', self.root);\n\t\t\t\t\t\tif(elem.length)\n\t\t\t\t\t\t\telem.html(input);\n\t\t\t\t\t}\n\t\t\t\t\thide_page_splash(1);                                        \n\t\t\t\t},\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(textStatus);\n\t\t\t\t\tconsole.log(jqXHR);\n\t\t\t\t\tconsole.log(errorThrown);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Submit input field values to the server\n\t\t */\n\t\tsave: function()\n\t\t{\n\t\t\tvar self = this;\n\t\t\tvar fieldMetadata = {};\n\t\t\tvar formData = process_data_fields(this.root.attr('id'));\n\t\t\tformData.append('model', this.root.data('model'));\n\t\t\tformData.append('item_id', this.root.data('item_id'));\n\t\t\tformData.append('list_id', this.root.data('list_id'));\n\t\t\tformData.append('edit_form_id', this.root.data('form_id'));\n\t\t\t\n\t\t\t// collect metadata of input fields\n\t\t\tthis.fields.each(function()\n\t\t\t{\n\t\t\t\tfieldMetadata[$(this).data('name')] = {\n\t\t\t\t\tdisplay: $(this).data('display') ? $(this).data('display') : 'raw'\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\tformData.append('field_metadata', JSON.stringify(fieldMetadata));\n\t\t\t\n\t\t\tshow_page_splash(1);\n\t\t\t\n\t\t\t// submit a request\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: DX_CORE.site_url + 'freeform/' + this.root.data('item_id') + '?_method=PUT',\n\t\t\t\tdataType: 'json',\n\t\t\t\tprocessData: false,\n\t\t\t\tcontentType: false,\n\t\t\t\tdata: formData,\n\t\t\t\tsuccess: function(data)\n\t\t\t\t{\n\t\t\t\t\tif(typeof data.success != \"undefined\" && data.success == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnotify_err(data.error);\n\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tself.editButton.show();\n\t\t\t\t\tself.saveButton.hide();\n\t\t\t\t\tself.cancelButton.hide();\n\t\t\t\t\t\n\t\t\t\t\t// replace input fields with html data from server response\n\t\t\t\t\tfor(var i = 0; i < data.fields.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar name = data.fields[i].name;\n\t\t\t\t\t\tvar html = data.fields[i].html;\n\t\t\t\t\t\tvar elem = $('[data-name=\"' + name + '\"]', self.root);\n\t\t\t\t\t\tif(elem.length)\n\t\t\t\t\t\t\telem.html(html);\n\t\t\t\t\t}\n\t\t\t\t\thide_page_splash(1);\n\t\t\t\t},\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(textStatus);\n\t\t\t\t\tconsole.log(jqXHR);\n\t\t\t\t\tconsole.log(errorThrown);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remove input fields and display original HTML\n\t\t */\n\t\tcancel: function()\n\t\t{\n\t\t\tvar self = this;\n\t\t\tthis.editButton.show();\n\t\t\tthis.saveButton.hide();\n\t\t\tthis.cancelButton.hide();\n\t\t\tthis.fields.each(function()\n\t\t\t{\n\t\t\t\t$(this).html(self.originalData[$(this).data('name')]);\n\t\t\t});\n\t\t}\n\t});\n})(jQuery);","/**\n * Author:  Eugene Ostapenko <evo@olympsoft.com>\n * License: MIT\n * Created: 04.11.16, 19:33\n */\n(function($)\n{\n\t/**\n\t * InlineForm - a jQuery plugin that provides a way to work with AJAX form embedded into a page\n\t *\n\t * @param root\n\t * @returns {*}\n\t * @constructor\n\t */\n\t$.fn.InlineForm = function(opts)\n\t{\n\t\tvar options = $.extend({}, $.fn.InlineForm.defaults, opts);\n\t\t\n\t\treturn this.each(function()\n\t\t{\n\t\t\tnew $.InlineForm(this, options);\n\t\t});\n\t};\n\t\n\t$.fn.InlineForm.defaults = {\n\t\tbeforeSave: null,\n\t\tafterSave: null,\n\t\templ_search_page_url: \"/search\"\n\t};\n\t\n\t/**\n\t * InlineForm constructor\n\t *\n\t * @param root\n\t * @constructor\n\t */\n\t$.InlineForm = function(root, opts)\n\t{\n\t\t$.data(root, 'InlineForm', this);\n\t\tvar self = this;\n\t\tthis.options = opts;\n\t\tthis.root = $(root);\n\t\tthis.tabs = $('.tab-pane', this.root).not(\".dx-grid-tab-pane\");\n\t\t\n\t\t// detached fields, that are custom placed outside of main form (e.g. avatar in employee profile)\n\t\tthis.fields = $('[data-name]', this.root);\n\t\tthis.fieldNames = [];\n\t\t\n\t\tthis.fields.each(function()\n\t\t{\n\t\t\tself.fieldNames.push($(this).data('name'));\n\t\t});\n\t\t\n\t\tthis.originalTabs = {};\n\t\tthis.originalFields = {};\n\t\tthis.editButton = $('.dx-edit-profile', this.root);\n\t\tthis.saveButton = $('.dx-save-profile', this.root);\n\t\tthis.cancelButton = $('.dx-cancel-profile', this.root);\n\t\tthis.deleteButton = $('.dx-delete-profile', this.root);\n\t\tthis.requests = {};\n\t\tthis.onRequestSuccess = [];\n\t\tthis.onRequestFailed = [];\n\t\t\n\t\t// Bind callbacks to buttons\n\t\tthis.editButton.click(function()\n\t\t{\n\t\t\tself.edit();\n\t\t});\n\t\tthis.saveButton.click(function()\n\t\t{\n\t\t\tself.save();\n\t\t});\n\t\tthis.cancelButton.click(function()\n\t\t{\n\t\t\tself.cancel();\n\t\t});\n\t\tthis.deleteButton.click(function()\n\t\t{\n\t\t\tself.destroy();\n\t\t});\n\t};\n\t\n\t/**\n\t * InlineForm methods\n\t */\n\t$.extend($.InlineForm.prototype, {\n\t\t/**\n\t\t * Resets and initializes all async request processing parameters\n\t\t * @param {integer} total Total count of processes which will be processed asynchronously\n\t\t */\n\t\tinitRequest: function(total)\n\t\t{\n\t\t\tthis.requests = {\n\t\t\t\ttotal: total,\n\t\t\t\tsucceeded: 0,\n\t\t\t\tfailed: 0\n\t\t\t};\n\t\t\t\n\t\t\tthis.onRequestSuccess = [];\n\t\t\tthis.onRequestFailed = [];\n\t\t},\n\t\t/**\n\t\t * Saves completed request status. If all request are finished, then execute success commands\n\t\t * @param {boolean} is_success Parmeter if process was successful\n\t\t */\n\t\tsetRequestStatus: function(is_success)\n\t\t{\n\t\t\tif(is_success)\n\t\t\t{\n\t\t\t\tthis.requests.succeeded++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.requests.failed++;\n\t\t\t}\n\t\t\t\n\t\t\tif(this.requests.total === (this.requests.succeeded + this.requests.failed))\n\t\t\t{\n\t\t\t\tif(this.requests.failed === 0)\n\t\t\t\t{\n\t\t\t\t\tfor(var i = 0; i < this.onRequestSuccess.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.onRequestSuccess[i].func(this.onRequestSuccess[i].args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfor(var i = 0; i < this.onRequestFailed.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.onRequestFailed[i].func(this.onRequestFailed[i].args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\thide_page_splash(1);\n\t\t\t}\n\t\t},\n\t\t\n\t\tstoreOriginalData: function()\n\t\t{\n\t\t\tvar self = this;\n\t\t\t\n\t\t\tthis.fields = $('[data-name]', this.root);\n\t\t\t\n\t\t\tthis.tabs.each(function()\n\t\t\t{\n\t\t\t\tself.originalTabs[$(this).data('tabTitle')] = $(this).html();\n\t\t\t});\n\t\t\t\n\t\t\tthis.fields.each(function()\n\t\t\t{\n\t\t\t\tself.originalFields[$(this).data('name')] = $(this).html();\n\t\t\t});\n\t\t\t\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replace HTML with form input fields\n\t\t */\n\t\tedit: function()\n\t\t{\n\t\t\tvar self = this;\n\t\t\t\n\t\t\t// a structure for JSON request\n\t\t\tvar request = {\n\t\t\t\tlist_id: this.root.data('list_id'),\n\t\t\t\ttab_list: [],\n\t\t\t\tfield_list: this.fieldNames\n\t\t\t};\n\t\t\t\n\t\t\tthis.storeOriginalData();\n\t\t\t\n\t\t\tshow_page_splash(1);\n\t\t\t\n\t\t\t// perform a request to the server\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: DX_CORE.site_url + 'inlineform/' + this.root.data('item_id') + '/edit',\n\t\t\t\tdataType: 'json',\n\t\t\t\tdata: request,\n\t\t\t\tsuccess: function(data)\n\t\t\t\t{\n\t\t\t\t\tif(typeof data.success != \"undefined\" && data.success == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnotify_err(data.error);\n\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tself.editButton.hide();\n\t\t\t\t\t\n\t\t\t\t\tvar tabs = $($.parseHTML('<div>' + data.tabs + '</div>')).find('.tab-pane').not(\".dx-grid-tab-pane\");\n\t\t\t\t\t\n\t\t\t\t\t// replace original html content of marked elements with input fields\n\t\t\t\t\tfor(var i = 0; i < tabs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tab = $(tabs[i]);\n\t\t\t\t\t\tvar elem = $('[data-tab-title=\"' + tab.data('tabTitle') + '\"]', self.root);\n\t\t\t\t\t\tif(elem.length)\n\t\t\t\t\t\t\telem.html(tab.html());\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor(var name in data.fields)\n\t\t\t\t\t{\n\t\t\t\t\t\t$('[data-name=\"' + name + '\"]').html(data.fields[name]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(self.root.data('has_users_documents_access') == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\twindow.DxEmpPersDocs.toggleDisable(false);\n\t\t\t\t\t}\n                                        \n\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\n\t\t\t\t\t$('.dx-stick-footer').show();\n\t\t\t\t},\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(textStatus);\n\t\t\t\t\tconsole.log(jqXHR);\n\t\t\t\t\thide_page_splash(1);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Submit input field values to the server\n\t\t */\n\t\tsave: function()\n\t\t{\n\t\t\tvar self = this;\n\t\t\tvar formData = process_data_fields(this.root.attr('id'));\n\t\t\tformData.append('item_id', this.root.data('item_id'));\n\t\t\tformData.append('list_id', this.root.data('list_id'));\n\t\t\tformData.append('edit_form_id', this.root.data('form_id'));\n\t\t\tformData.append('redirect_url', this.root.data('redirect_url'));\n\t\t\tformData.append('field_list', JSON.stringify(this.fieldNames));\n\t\t\t\n\t\t\tvar url = DX_CORE.site_url + 'inlineform';\n\t\t\tif(this.root.data('mode') != 'create')\n\t\t\t{\n\t\t\t\turl += '/' + this.root.data('item_id') + '?_method=PUT';\n\t\t\t}\n\t\t\t\n\t\t\tshow_page_splash(1);\n\t\t\t\n\t\t\t// submit a request\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: url,\n\t\t\t\tdataType: 'json',\n\t\t\t\tprocessData: false,\n\t\t\t\tcontentType: false,\n\t\t\t\tdata: formData,\n\t\t\t\tsuccess: function(data)\n\t\t\t\t{\n\t\t\t\t\tif(typeof data.success != \"undefined\" && data.success == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnotify_err(data.error);\n\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(self.root.data('mode') == 'create')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(self.root.data('has_users_documents_access') == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.DxEmpPersDocs.userId = data.item_id;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Custom tab\n\t\t\t\t\t\t\twindow.DxEmpPersDocs.onClickSaveDocs(function()\n\t\t\t\t\t\t\t{\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\t\t\t$('.dx-stick-footer').hide();\n\t\t\t\t\t\t\t\twindow.location = data.redirect;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{                                                    \n\t\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\t\t$('.dx-stick-footer').hide();\n\t\t\t\t\t\t\twindow.location = data.redirect;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(self.root.data('has_users_documents_access') == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Custom tab\n\t\t\t\t\t\twindow.DxEmpPersDocs.onClickSaveDocs(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.DxEmpPersDocs.toggleDisable(true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tself.editButton.show();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar tabs = $($.parseHTML('<div>' + data.tabs + '</div>')).find('.tab-pane').not(\".dx-grid-tab-pane\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// replace original html content of marked elements with input fields\n\t\t\t\t\t\t\tfor(var i = 0; i < tabs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tab = $(tabs[i]);\n\t\t\t\t\t\t\t\tvar elem = $('[data-tab-title=\"' + tab.data('tabTitle') + '\"]', self.root);\n\t\t\t\t\t\t\t\tif(elem.length)\n\t\t\t\t\t\t\t\t\telem.html(tab.html());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(self.options.afterSave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tself.options.afterSave();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\t\t$('.dx-stick-footer').hide();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tself.editButton.show();\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar tabs = $($.parseHTML('<div>' + data.tabs + '</div>')).find('.tab-pane').not(\".dx-grid-tab-pane\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t// replace original html content of marked elements with input fields\n\t\t\t\t\t\tfor(var i = 0; i < tabs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tab = $(tabs[i]);\n\t\t\t\t\t\t\tvar elem = $('[data-tab-title=\"' + tab.data('tabTitle') + '\"]', self.root);\n\t\t\t\t\t\t\tif(elem.length)\n\t\t\t\t\t\t\t\telem.html(tab.html());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(var name in data.fields)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$('[data-name=\"' + name + '\"]').html(data.fields[name]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(self.options.afterSave)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.options.afterSave();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\t$('.dx-stick-footer').hide();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(jqXHR);\n\t\t\t\t\tconsole.log(errorThrown);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remove input fields and display original HTML\n\t\t */\n\t\tcancel: function()\n\t\t{\n\t\t\tif(this.root.data('mode') == 'create')\n\t\t\t{\n\t\t\t\tshow_page_splash(1);\n\t\t\t\twindow.location = this.options.empl_search_page_url;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthis.editButton.show();\n\t\t\t\n\t\t\tfor(var k in this.originalTabs)\n\t\t\t{\n\t\t\t\tthis.tabs.filter('[data-tab-title=\"' + k + '\"]').html(this.originalTabs[k]);\n\t\t\t}\n\t\t\t\n\t\t\tfor(var name in this.originalFields)\n\t\t\t{\n\t\t\t\tthis.fields.filter('[data-name=\"' + name + '\"]').html(this.originalFields[name]);\n\t\t\t}\n\t\t\t\n\t\t\t$('.dx-stick-footer').hide();\n\t\t\t\n\t\t\tif(this.root.data('has_users_documents_access') == 1)\n\t\t\t{\n\t\t\t\twindow.DxEmpPersDocs.cancelEditMode();\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Delete an item from storage.\n\t\t */\n\t\tdestroy: function()\n\t\t{\n\t\t\tif(!confirm(Lang.get('frame.confirm_delete')))\n\t\t\t\treturn;\n\t\t\t\n\t\t\tvar request = {\n\t\t\t\tedit_form_id: this.root.data('form_id'),\n\t\t\t\titem_id: this.root.data('item_id')\n\t\t\t};\n\t\t\t\n\t\t\tshow_page_splash(1);\n\t\t\t\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: DX_CORE.site_url + 'inlineform/' + this.root.data('item_id') + '?_method=DELETE',\n\t\t\t\tdataType: 'json',\n\t\t\t\tdata: request,\n\t\t\t\tsuccess: function(data)\n\t\t\t\t{\n\t\t\t\t\tif(typeof data.success != \"undefined\" && data.success == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnotify_err(data.error);\n\t\t\t\t\t\thide_page_splash(1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\twindow.location = data.redirect;\n\t\t\t\t},\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(textStatus);\n\t\t\t\t\tconsole.log(jqXHR);\n\t\t\t\t\thide_page_splash(1);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n})(jQuery);\n","(function($)\n{\n\t/**\n\t * EmplLinksFix - a jQuery plugin that fix (re-init) links to other employees (manager, reporting manager)\n\t *\n\t * @param root\n\t * @returns {*}\n\t * @constructor\n\t */\n\t$.fn.EmplLinksFix = function(opts)\n\t{\n\t\tvar options = $.extend({}, $.fn.EmplLinksFix.defaults, opts);\n\t\treturn this.each(function()\n\t\t{\n\t\t\tnew $.EmplLinksFix(this, options);\n\t\t});\n\t};\n\t\n\t$.fn.EmplLinksFix.defaults = {\n\t\tprofile_url: \"/employee/profile/\"\n\t};\n\t\n\t/**\n\t * EmplLinksFix constructor\n\t *\n\t * @param root\n\t * @constructor\n\t */\n\t$.EmplLinksFix = function(root, opts)\n\t{\n\t\t$.data(root, 'EmplLinksFix', this);\n\t\tvar self = this;\n\t\tthis.options = opts;\n\t\tthis.root = $(root);\n                \n\t\tthis.flds_managers = $('.dx-autocompleate-field[data-item-field=manager_id], .dx-autocompleate-field[data-item-field=reporting_manager_id]', this.root);\n\t\tthis.tiles_managers = $('.employee-manager-tile', this.root);\n                \n                this.tiles_managers.each(function()\n                {\n                    if (!$(this).data(\"is-fix-init\")) {\n                        \n                        $(this).click(function() {\n                            self.show_tile_manager($(this).data(\"empl-id\"));\n                        });\n                    \n                        $(this).data(\"is-fix-init\", 1);\n                    }\n                });\n                                \n                this.flds_managers.each(function()\n                {\n                    if (!$(this).data(\"is-fix-init\")) {\n                        var fld = $(this);\n                        fld.find(\".dx-rel-id-add-btn\").off(\"click\"); //remove original event handler which will open CMS form\n                        \n                        fld.find(\".dx-rel-id-add-btn\").click(function() {\n                            self.show_manager(fld);\n                        });\n                        \n                        // Reset tooltip from edit to view hint\n                        fld.find(\".dx-rel-id-add-btn\").tooltipster('destroy');\n                        fld.find(\".dx-rel-id-add-btn\").attr(\"title\", Lang.get('empl_profile.hint_view_profile'));\n                        \n                        fld.find(\".dx-rel-id-add-btn\").tooltipster({\n                            theme: 'tooltipster-light',\n                            animation: 'grow',\n                            maxWidth: 300\n                        });\n        \n                        $(this).data(\"is-fix-init\", 1);\n                    }\n                });\n\t};\n\t\n\t/**\n\t * EmplLinksFix methods\n\t */\n\t$.extend($.EmplLinksFix.prototype, {\n\t\t/**\n\t\t * Show manager profile\n\t\t */\n\t\tshow_manager: function(fld)\n\t\t{\n                    var item_id = fld.find(\".dx-auto-input-id\").val();\n                    \n                    if (item_id == 0) {\n                        return;\n                    }\n                    show_page_splash(1);\n                    window.location = this.options.profile_url + item_id;\n\t\t},\n                show_tile_manager: function(empl_id)\n                {\n                    show_page_splash(1);\n                    window.location = this.options.profile_url + empl_id;\n                }\n\t});\n})(jQuery);\n\n$(document).ajaxComplete(function() {\n    $(\".dx-employee-profile.freeform\").EmplLinksFix();\n});\n\n$(document).ready(function() {\n    $(\".dx-employee-profile.freeform\").EmplLinksFix();\n});","/**\n * Contains logic for viewing and editing employee's documents\n * @type Window.DxEmpPersDocs|window.DxEmpPersDocs \n */\nwindow.DxEmpPersDocs = window.DxEmpPersDocs || {\n    /**\n     * Row counter, used to identify rows\n     */\n    rowCount: 0,\n    /**\n     * User ID which is loaded\n     */\n    userId: 0,\n    /**\n     * Date format used in system. This format is used to initialize date picker\n     */\n    dateFormat: '',\n    /**\n     * Locale used in system. This format is used to initializes date picker\n     */\n    locale: 'en',\n    /**\n     * Registers ID for table where documents are saved\n     */\n    empDocListId: 0,\n    /**\n     * Registers field ID where documents are saved\n     */\n    empDocFldId: 0,\n    /**\n     * Parameter if component is initialized\n     */\n    isInit: false,\n    /**\n     * Clone of view which contains view state with data saved in database.\n     * If edit mode is canceled, then this view is replaced with edit view and all made changes are lost\n     */\n    viewClone: '',\n    /**\n     * Callback function which is called after successful components initialization\n     * @param {type} data Data which is sent to callback function\n     */\n    callbackOnInitiSuccess: function (data) {},\n    /**\n     * Callback function which is called after successful data save\n     * @param {type} data Data which is sent to callback function\n     */\n    callbackOnSaveSuccess: function (data) {},\n    /**\n     * Callback function which is called after process is exited with error\n     * @param {type} data Data which is sent to callback function\n     */\n    callbackOnError: function (data) {},\n    /**\n     * Initializes component\n     */\n    init: function (callbackOnInitiSuccess) {\n        if (callbackOnInitiSuccess) {\n            window.DxEmpPersDocs.callbackOnInitiSuccess = callbackOnInitiSuccess;\n        } else {\n            window.DxEmpPersDocs.callbackOnInitiSuccess = function () {};\n        }\n\n        window.DxEmpPersDocs.userId = ($('#dx-emp-pers-docs-panel').attr('data-user-id') == '' ? 0 : $('#dx-emp-pers-docs-panel').attr('data-user-id'));\n        window.DxEmpPersDocs.dateFormat = $('#dx-emp-pers-docs-panel').attr('data-date-format');\n        window.DxEmpPersDocs.locale = $('#dx-emp-pers-docs-panel').attr('data-locale');\n        window.DxEmpPersDocs.empDocListId = $('#dx-emp-pers-docs-panel').attr('data-emp-docs-list-id');\n        window.DxEmpPersDocs.empDocFldId = $('#dx-emp-pers-docs-panel').attr('data-emp-docs-fld-id');\n        $(\"#dx-emp-pers-docs-country\").change(window.DxEmpPersDocs.onChangeCountry);\n        window.DxEmpPersDocs.loadEmployeeData();\n    },\n    /**\n     * Enter edit mode by saving view state in memory. \n     * It is needed to revert changes if edit mode is canceled\n     */\n    enterEditMode: function () {\n        window.DxEmpPersDocs.viewClone = $('#dx-emp-pers-docs-panel').clone(true, true);\n    },\n    /**\n     * Cancels edit mode by loading previous view state\n     */\n    cancelEditMode: function () {\n        $('#dx-emp-pers-docs-panel').replaceWith(window.DxEmpPersDocs.viewClone);\n        window.DxEmpPersDocs.viewClone = null;\n        window.DxEmpPersDocs.toggleDisable(true);\n    },\n    /**\n     * Loads employee document data from server\n     */\n    loadEmployeeData: function () {\n        $.ajax({\n            url: '/employee/personal_docs/get/employee_docs/' + window.DxEmpPersDocs.userId,\n            type: \"get\",\n            success: window.DxEmpPersDocs.onSuccessLoadEmployeeData,\n            error: window.DxEmpPersDocs.onAjaxError\n        });\n    },\n    /**\n     * Evenet ahndler on successful employee data retrieval\n     * @param {array} data Employee document data which ir retrieved\n     */\n    onSuccessLoadEmployeeData: function (data) {\n        if (data != '') {\n            var data_rows = JSON.parse(data);\n            // Prepares dropdown list options\n            for (var i = 0; i < data_rows.length; i++) {\n                window.DxEmpPersDocs.createNewDocRow(false, data_rows[i]);\n            }\n        }\n\n        $(\"#dx-emp-pers-docs-country\").trigger('change');\n    },\n    /**\n     * Draws document row\n     * @param {boolean} is_new Argument if row is new and doesnt contain any data\n     * @param {array} data Data which will be used to draw row. Can contains saved data or if new then document type\n     */\n    createNewDocRow: function (is_new, data) {\n        // Gets template for row and converts it as jquery object\n        var new_row_html = $($('#dx-emp-pers-docs-new-row').html());\n        if (is_new) {\n            new_row_html = window.DxEmpPersDocs.setDocTypeValue(new_row_html, data);\n        } else {\n            new_row_html = window.DxEmpPersDocs.setValues(new_row_html, data);\n        }\n\n        // Append row to table\n        if (is_new) {\n            $('#dx-emp-pers-docs-table').append(new_row_html);\n        } else {\n            $('#dx-emp-pers-docs-table-history').append(new_row_html);\n        }\n\n        // Bind all rquired events for row elements\n        window.DxEmpPersDocs.bindDocRowEvenets(new_row_html);\n        // Increase row counter\n        window.DxEmpPersDocs.rowCount++;\n    },\n    /**\n     * Initiates date picker control in row\n     * @param {DOMElement} new_row_html Row's DOM elemenet\n     * @param {string} value Date which will be set in date picker\n     * @returns {DOMElement} Edited row with initialized date picker\n     */\n    initValidToDatePicker: function (new_row_html, value) {\n        var picker = new_row_html.find('.dx-emp-pers-docs-validto-input');\n        picker.attr('id', 'dx-emp-pers-docs-validto-input-' + window.DxEmpPersDocs.rowCount);\n        picker.val(value);\n        picker.datetimepicker({\n            lang: window.DxEmpPersDocs.locale,\n            format: window.DxEmpPersDocs.dateFormat,\n            timepicker: 0,\n            dayOfWeekStart: 1,\n            closeOnDateSelect: true\n        });\n        new_row_html.find('.dx-emp-pers-docs-validto-input-calc').click({picker_num: window.DxEmpPersDocs.rowCount}, function (e) {\n            jQuery('#dx-emp-pers-docs-validto-input-' + e.data.picker_num).datetimepicker('show');\n        });\n        return new_row_html;\n    },\n    /**\n     * Sets data for new document row\n     * @param {DOMElement} new_row_html Row's DOM elemenet\n     * @param {array} data_row Data array for input values\n     * @returns {DOMElement} Row containing values\n     */\n    setDocTypeValue: function (new_row_html, data_row) {\n        // Prepare \"valid to\" date picker            \n        new_row_html = window.DxEmpPersDocs.initValidToDatePicker(new_row_html, '');\n        new_row_html.attr('id', 'dx-emp-pers-docs-row-' + data_row.id);\n        new_row_html.find('.dx-emp-pers-docs-type-input').val(data_row.id);\n        new_row_html.find('.dx-emp-pers-docs-type-label').html(data_row.name);\n        return new_row_html;\n    },\n    /**\n     * Sets data for already saved document row\n     * @param {DOMElement} new_row_html Row's DOM elemenet\n     * @param {array} data_row Data array for input values\n     * @returns {DOMElement} Row containing values\n     */\n    setValues: function (new_row_html, data_row) {\n        new_row_html = window.DxEmpPersDocs.initValidToDatePicker(new_row_html, data_row.valid_to);\n        new_row_html.attr('id', 'dx-emp-pers-docs-row-' + data_row.doc_id);\n        new_row_html.find('.dx-emp-pers-docs-id-input').val(data_row.id);\n        new_row_html.find('.dx-emp-pers-docs-type-input').val(data_row.doc_id);\n        new_row_html.find('.dx-emp-pers-docs-type-label').html(data_row.personal_document.name);\n        new_row_html.find('.dx-emp-pers-docs-docnr-input').val(data_row.doc_nr);\n        new_row_html.find('.dx-emp-pers-docs-publisher-input').val(data_row.publisher);\n        window.DxEmpPersDocs.setFileValue(new_row_html, data_row.id, data_row.file_name);\n\n        return new_row_html;\n    },\n    /**\n     * Sets saved document link in file input box\n     * @param {DOMElement} new_row_html Row's DOM elemenet\n     * @param {integer} row_id ID for document row in database\n     * @param {string} file_name Saved name for the file\n     */\n    setFileValue: function (new_row_html, row_id, file_name) {\n        if (file_name && file_name != null) {\n            var file_link = \"<a href='JavaScript: download_file(\" + row_id + \" , \" + window.DxEmpPersDocs.empDocListId + \", \" + window.DxEmpPersDocs.empDocFldId + \");'>\" + file_name + \"</a>\";\n            new_row_html.find('.dx-emp-pers-docs-file-input-download').html(file_link);\n            new_row_html.find('.dx-emp-pers-docs-file-input-isset').val(1);\n        }\n    },\n    /**\n     * Clears documents row data\n     * @param {object} e Event arguments which contains event caller\n     */\n    clearDocRow: function (e) {\n        var row = $(e.target).parents('.dx-emp-pers-docs-row');\n        row.find('.dx-emp-pers-docs-id-input').val(0);\n        row.find('.dx-emp-pers-docs-docnr-input').val('');\n        row.find('.dx-emp-pers-docs-validto-input').val('');\n        row.find('.dx-emp-pers-docs-publisher-input').val('');\n        row.find('.dx-emp-pers-docs-file-input-remove-btn').trigger('click');\n    },\n    /**\n     * Gets data from inputs for data saving\n     * @returns {FormData} Data retrieved from input fields\n     */\n    getDataForSave: function () {\n        var rows = $('#dx-emp-pers-docs-table .dx-emp-pers-docs-row');\n        var data = {\n            user_id: window.DxEmpPersDocs.userId,\n            rows: []\n        };\n        var formData = new FormData();\n        for (var i = 0; i < rows.length; i++) {\n            var row = $(rows[i]);\n            var row_data = {};\n            row_data.id = row.find('.dx-emp-pers-docs-id-input').val();\n            row_data.document_type = row.find('.dx-emp-pers-docs-type-input').val();\n            row_data.publisher = row.find('.dx-emp-pers-docs-publisher-input').val();\n            row_data.valid_to = row.find('.dx-emp-pers-docs-validto-input').val();\n            row_data.doc_nr = row.find('.dx-emp-pers-docs-docnr-input').val();\n            row_data.file_remove = $.trim(row.find('.dx-emp-pers-docs-file-input-download').html()) === '';\n            var file = row.find('.dx-emp-pers-docs-file-input-file').prop(\"files\")[0];\n            formData.append('file' + i, file);\n            data.rows.push(row_data);\n        }\n\n\n        formData.append('doc_country_id', $('#dx-emp-pers-docs-country').val());\n        formData.append('data', JSON.stringify(data));\n        return formData;\n    },\n    /**\n     * Binds click event for clear button\n     * @param {DOMElement} new_row_html Row's DOM elemenet\n     */\n    bindDocRowEvenets: function (new_row_html) {\n        new_row_html.find('.dx-emp-pers-docs-clear-btn').click(window.DxEmpPersDocs.clearDocRow);\n    },\n    /**\n     * Event when changing country from dropdown which requests document types associated with selected country\n     * @param {object} e Event arguments which contains event caller\n     */\n    onChangeCountry: function (e) {\n        var country_id = $(e.target).val();\n        $.ajax({\n            url: DX_CORE.site_url + 'employee/personal_docs/get/docs_by_country/' + country_id,\n            type: \"get\",\n            success: window.DxEmpPersDocs.onSuccessChangeCountry,\n            error: window.DxEmpPersDocs.onAjaxError\n        });\n    },\n    /**\n     * Event on successful document type retrieval when changing country\n     * @param {array} data Document types associated with country\n     */\n    onSuccessChangeCountry: function (data) {\n        var docs = JSON.parse(data);\n        window.DxEmpPersDocs.drawRows(docs);\n        window.DxEmpPersDocs.finishInit();\n    },\n    /**\n     * Draws rows when country is changed\n     * @param {array} docs Document types associated with selected country\n     */\n    drawRows: function (docs) {\n        // Moves all existing rows to hidden history div\n        $('#dx-emp-pers-docs-table').contents().appendTo('#dx-emp-pers-docs-table-history');\n        // Iterates through all the document types\n        for (var d = 0; d < docs.length; d++) {\n            var doc = docs[d];\n            var existing_row = $('#dx-emp-pers-docs-row-' + doc.id);\n            // Check if row exist in history div\n            if (existing_row.length > 0) {\n                // Move existing document type row into visible view\n                existing_row.appendTo('#dx-emp-pers-docs-table');\n            } else {\n                // Creates new row if it doesn't exist for document type\n                window.DxEmpPersDocs.createNewDocRow(true, doc);\n            }\n        }\n        // Initiates tooltips because they are not initiated because rows are created dynamicaly\n        $('#dx-emp-pers-docs-table').find('[data-tooltip-title]').each(function (i, obj) {\n            $(obj).attr('title', $(obj).data('tooltip-title'));\n            $(obj).tooltip();\n        });\n    },\n    /**\n     * Finishes initialization\n     */\n    finishInit: function () {\n        if (!window.DxEmpPersDocs.isInit) {\n            window.DxEmpPersDocs.isInit = true;\n            if (window.DxEmpPersDocs.userId == 0) {\n                window.DxEmpPersDocs.toggleDisable(false);\n            } else {\n                window.DxEmpPersDocs.toggleDisable(true);\n            }\n            window.DxEmpPersDocs.callbackOnInitiSuccess();\n        }\n    },\n    /**\n     * Saves data\n     * @param {function} callbackOnSaveSuccess Callback function for successful saving\n     * @param {function} callbackOnError Callback function when error happens on data save\n     */\n    onClickSaveDocs: function (callbackOnSaveSuccess, callbackOnError) {\n        if (callbackOnSaveSuccess) {\n            window.DxEmpPersDocs.callbackOnSaveSuccess = callbackOnSaveSuccess;\n        } else {\n            window.DxEmpPersDocs.callbackOnSaveSuccess = function () {};\n        }\n        if (callbackOnError) {\n            window.DxEmpPersDocs.callbackOnError = callbackOnError;\n        } else {\n            window.DxEmpPersDocs.callbackOnError = function () {};\n        }\n\n        var form_data = window.DxEmpPersDocs.getDataForSave();\n        $.ajax({\n            url: DX_CORE.site_url + 'employee/personal_docs/save',\n            data: form_data,\n            type: \"post\",\n            processData: false,\n            dataType: \"json\",\n            contentType: false,\n            success: window.DxEmpPersDocs.onSuccessSave,\n            error: window.DxEmpPersDocs.onAjaxError\n        });\n    },\n    /**\n     * Event on successful data save\n     * @param {array} data_rows Data returned about saved document rows\n     */\n    onSuccessSave: function (data_rows) {\n        // Set id for rows and update file input control value\n        for (var i = 0; i < data_rows.length; i++) {\n            var data_row = data_rows[i];\n            var row = $('#dx-emp-pers-docs-row-' + data_row.doc_id);\n\n            if (row.length > 0) {\n                row.find('.dx-emp-pers-docs-id-input').val(data_row.id);\n                row.find('.dx-emp-pers-docs-file-input-remove-btn').trigger('click');\n                window.DxEmpPersDocs.setFileValue(row, data_row.id, data_row.file_name);\n            }\n        }\n\n        $('#dx-emp-pers-docs-table-history').empty();\n        window.DxEmpPersDocs.callbackOnSaveSuccess();\n    },\n    /**\n     * Event when ajax request gets error\n     * @param {array} data Data containing error information\n     */\n    onAjaxError: function (data) {\n        window.DxEmpPersDocs.finishInit();\n        window.DxEmpPersDocs.callbackOnError();\n    },\n    /**\n     * Swicthed edit and view modes\n     * @param {boolean} is_disabled If true then view mode is set else edit mode is set\n     */\n    toggleDisable: function (is_disabled) {\n        if (!is_disabled) {\n            window.DxEmpPersDocs.enterEditMode();\n        }\n\n        var rows = $('#dx-emp-pers-docs-table .dx-emp-pers-docs-row');\n        for (var i = 0; i < rows.length; i++) {\n            var row = $(rows[i]);\n            row.find('.dx-emp-pers-docs-publisher-input').prop('disabled', is_disabled);\n            row.find('.dx-emp-pers-docs-validto-input').prop('disabled', is_disabled);\n            row.find('.dx-emp-pers-docs-validto-input-calc').prop('disabled', is_disabled);\n            row.find('.dx-emp-pers-docs-docnr-input').prop('disabled', is_disabled);\n            if (is_disabled) {\n                row.find('.dx-emp-pers-docs-file-input-set-btn').hide();\n                if (row.find('.dx-emp-pers-docs-file-input-file').prop(\"files\")[0]) {\n                    row.find('.dx-emp-pers-docs-file-input-remove-btn').hide();\n                }\n\n                row.find('.dx-emp-pers-docs-clear-btn').hide();\n            } else {\n                row.find('.dx-emp-pers-docs-validto-input').datetimepicker('destroy');\n                row.find('.dx-emp-pers-docs-validto-input').datetimepicker({\n                    lang: window.DxEmpPersDocs.locale,\n                    format: window.DxEmpPersDocs.dateFormat,\n                    timepicker: 0,\n                    dayOfWeekStart: 1,\n                    closeOnDateSelect: true\n                });\n\n                row.find('.dx-emp-pers-docs-file-input-set-btn').show();\n                if (row.find('.dx-emp-pers-docs-file-input-file').prop(\"files\")[0]) {\n                    row.find('.dx-emp-pers-docs-file-input-remove-btn').show();\n                }\n\n                row.find('.dx-emp-pers-docs-clear-btn').show();\n            }\n        }\n\n        $('#dx-emp-pers-docs-country').prop('disabled', is_disabled);\n    }\n};","/**\n * Contains logic for viewing and editing employee's notes\n * @type Window.DxEmpPersDocs|window.DxEmpPersDocs \n */\nwindow.DxEmpNotes = window.DxEmpNotes || {\n    /**\n     * User ID which is loaded\n     */\n    userId: 0,\n    /**\n     * Parameter if control is loaded\n     */\n    isLoaded: false,\n    /**\n     * Parameter if note is sending to server\n     */\n    isSending: false,\n    /**\n     * Default color for chat form background\n     */\n    chatFormColorDefault: 'white',\n    /**\n     * Initializes component\n     */\n    init: function (userId) {\n        window.DxEmpNotes.userId = userId;\n\n    },\n    /**\n     * Loads view\n     * @returns {undefined}\n     */\n    loadView: function () {\n        if (window.DxEmpNotes.isLoaded) {\n            return;\n        }\n\n        show_page_splash(1);\n\n        $.ajax({\n            url: DX_CORE.site_url + 'employee/notes/get/view/' + window.DxEmpNotes.userId,\n            type: \"get\",\n            success: window.DxEmpNotes.onLoadViewSuccess,\n            error: function (data) {\n                hide_page_splash(1);\n            }\n        });\n    },\n    /**\n     * Evnet handler when view is successfully loaded\n     * @returns {string} View's HTML\n     */\n    onLoadViewSuccess: function (data) {\n        $('#dx-tab_notes').html(data);\n\n        window.DxEmpNotes.chatFormColorDefault = $('.dx-emp-notes-chat-form').css(\"background-color\");\n\n        $('.dx-emp-notes-btn').click(window.DxEmpNotes.onNoteEnter);\n        $('.dx-emp-notes-input-text').keyup(function (e) {\n            if (e.keyCode == 13) {\n                window.DxEmpNotes.onNoteEnter();\n            }\n        });\n\n        $('.dx-emp-notes-chat').on('click', '.dx-emp-notes-btn-link-edit', {}, window.DxEmpNotes.onEditClick);\n        $('.dx-emp-notes-chat').on('click', '.dx-emp-notes-btn-link-delete', {}, window.DxEmpNotes.onDeleteClick);\n\n        window.DxEmpNotes.isLoaded = true;\n\n        hide_page_splash(1);\n    },\n    /**\n     * Retrieve data for saving\n     * @returns {object} Prepared data\n     */\n    getDataForSave: function () {\n        var data = {};\n\n        data.note_id = $('.dx-emp-notes-input-id').val();\n        data.user_id = window.DxEmpNotes.userId;\n        data.note_text = $('.dx-emp-notes-input-text').val();\n\n        return data;\n    },\n    /**\n     * Event handler when note saving is initiated\n     * @returns {undefined}\n     */\n    onNoteEnter: function () {\n        if (window.DxEmpNotes.isSending) {\n            return;\n        }\n\n        window.DxEmpNotes.showLoading();\n\n        var data = window.DxEmpNotes.getDataForSave();\n        $.ajax({\n            url: DX_CORE.site_url + 'employee/notes/save',\n            data: data,\n            type: \"post\",\n            success: window.DxEmpNotes.onSuccessSave,\n            error: window.DxEmpNotes.onAjaxError\n        });\n    },\n    /**\n     * Load selected note's data into note input boxes\n     * @param {object} e Evenet caller\n     * @returns {undefined}\n     */\n    onEditClick: function (e) {\n        var edit_btn = $(e.target);\n\n        var note_id = edit_btn.closest('.message').find('.dx-emp-notes-edit-id').val();\n        var note_text = edit_btn.closest('.message').find('.dx-emp-notes-edit-body').html();\n\n        $('.dx-emp-notes-input-id').val(note_id);\n        $('.dx-emp-notes-input-text').val(note_text);\n        $('.dx-emp-notes-input-text').focus();\n\n        // Animate \n        var chat_form = $('.dx-emp-notes-chat-form');\n\n        chat_form.animate({backgroundColor: '#7bb6de'}, 'slow', function () {\n            chat_form.animate({backgroundColor: window.DxEmpNotes.chatFormColorDefault}, 'slow');\n        });\n\n    },\n    /**\n     * Event handler for delete click. Opens modal confirmation window\n     * @param {object} e Event arguments\n     * @returns {undefined}\n     */\n    onDeleteClick: function (e) {\n        var del_btn = $(e.target);\n\n        var note_id = del_btn.closest('.message').find('.dx-emp-notes-edit-id').val();\n\n        PageMain.showConfirm(window.DxEmpNotes.onDeleteConfirm,\n                note_id,\n                Lang.get('employee.notes.delete_note_title'),\n                Lang.get('employee.notes.delete_note_text'),\n                Lang.get('form.btn_delete'),\n                '');\n    },\n    /**\n     * Event handler when delete operation is confirmed\n     * @param {integer} id Note's ID which will be deleted\n     * @returns {undefined}\n     */\n    onDeleteConfirm: function (id) {\n        if (window.DxEmpNotes.isSending) {\n            return;\n        }\n\n        window.DxEmpNotes.showLoading();\n        \n         var data = {\n             note_id: id\n         };\n        \n        $.ajax({\n            url: DX_CORE.site_url + 'employee/notes/delete',\n            data: data,\n            type: \"delete\",\n            success: window.DxEmpNotes.onSuccessDelete,\n            error: window.DxEmpNotes.onAjaxError\n        });\n    },\n    /**\n     * Shows loading box\n     * @returns {undefined}\n     */\n    showLoading: function () {\n        window.DxEmpNotes.isSending = true;\n        show_page_splash(1);\n    },\n    /**\n     * Hides loading box\n     * @returns {undefined}\n     */\n    hideLoading: function () {\n        window.DxEmpNotes.isSending = false;\n        hide_page_splash(1);\n    },\n    /**\n     * Event on successful note delete\n     * @param {integer} note_id Note id which was deleted\n     */\n    onSuccessDelete: function (note_id) {\n        if (note_id) {\n            $('.dx-emp-notes-edit-id[value=' + note_id + ']').closest('li').remove();\n        }\n\n        window.DxEmpNotes.hideLoading();\n    },\n    /**\n     * Event on successful data save\n     * @param {array} data Data returned about saved noted. Contains view for new note\n     */\n    onSuccessSave: function (data) {\n        // Removes old noted if existed, because it will be moved to top of the list as latest note\n        var note_id = $('.dx-emp-notes-input-id').val();\n        if (note_id) {\n            $('.dx-emp-notes-edit-id[value=' + note_id + ']').closest('li').remove();\n        }\n        $('.dx-emp-notes-input-id').val('');\n        $('.dx-emp-notes-input-text').val('');\n\n        window.DxEmpNotes.hideLoading();\n\n        if (data.view) {\n            $('.dx-emp-notes-chat').prepend($(data.view).fadeIn());\n        }\n    },\n    /**\n     * Event when ajax request gets error\n     * @param {array} data Data containing error information\n     */\n    onAjaxError: function (data) {\n        window.DxEmpNotes.hideLoading();\n    }\n};"]}