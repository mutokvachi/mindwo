{"version":3,"sources":["cache_scripts.js"],"names":[],"mappingsfile":"elix_login.js","sourcesContent":["(function($)\r\n{\r\n\t/**\r\n\t * CacheScripts - a jQuery plugin that loads in background JavaScript plugins so they are stored in cache\r\n         * Next pages loaded should load faster because will use allready cached files\r\n\t *\r\n\t * @param root\r\n\t * @returns {*}\r\n\t * @constructor\r\n\t */\r\n\t$.fn.CacheScripts = function(opts)\r\n\t{\r\n\t\tvar options = $.extend({}, $.fn.CacheScripts.defaults, opts);\r\n\t\treturn this.each(function()\r\n\t\t{\r\n\t\t\tnew $.CacheScripts(this, options);\r\n\t\t});\r\n\t};\r\n\t\r\n\t$.fn.CacheScripts.defaults = {\r\n\t};\r\n\t\r\n\t/**\r\n\t * CacheScripts constructor\r\n\t *\r\n\t * @param root\r\n\t * @constructor\r\n\t */\r\n\t$.CacheScripts = function(root, opts)\r\n\t{\r\n            $.data(root, 'CacheScripts', this);\r\n            var self = this;\r\n            this.options = opts;\r\n            this.root = $(root);\r\n            \r\n            this.sources = $('.dx-source', this.root);\r\n            \r\n            \r\n            var arr = [];\r\n            \r\n            this.sources.each(function()\r\n            {\r\n                var src = $(this).text();\r\n                arr.push(src);\r\n            });\r\n                        \r\n            var scripts = new getScripts(\r\n                arr,\r\n                function(src) {\r\n                    /* Executed each time a script has loaded */\r\n                    console.log(\"Script loaded: \" + src);\r\n                },\r\n                function () {\r\n                    /* Executed when the entire list of scripts has been loaded */\r\n                    console.log(\"All scripts loaded\");\r\n                }\r\n            );\r\n    \r\n            scripts.fetch();\r\n            \r\n\t};\r\n})(jQuery);\r\n\r\nfunction getScripts( scripts, onScript, onComplete )\r\n{\r\n    var scriptHandler = this;\r\n    this.async = true;\r\n    this.cache = true;\r\n    this.data = null;\r\n    this.complete = function () { scriptHandler.loaded(); };\r\n    this.scripts = scripts;\r\n    this.onScript = onScript;\r\n    this.onComplete = onComplete;\r\n    this.total = scripts.length;\r\n    this.progress = 0;\r\n};\r\n\r\ngetScripts.prototype.fetch = function() {    \r\n    var src = this.scripts[ this.progress ];\r\n    console.log('%cFetching %s','color:#ffbc2e;', src);\r\n\r\n    $.ajax({\r\n        crossDomain:true,\r\n        async:this.async,\r\n        cache:this.cache,\r\n        type:'GET',\r\n        url: src,\r\n        data:this.data,\r\n        statusCode: {\r\n            200: this.complete\r\n        },\r\n        dataType: 'text'\r\n    });\r\n};\r\n\r\ngetScripts.prototype.loaded = function () {    \r\n    var src_loaded = this.scripts[ this.progress ];\r\n    this.progress++;\r\n    if( this.progress >= this.total ) {\r\n        if(this.onComplete) this.onComplete();\r\n    } else {\r\n        this.fetch();\r\n    };\r\n    if(this.onScript) this.onScript(src_loaded);\r\n};\r\n\r\n$(document).ready(function() {\r\n    setTimeout(function(){ $(\".dx-cache-container\").CacheScripts(); }, 200);    \r\n});\r\n\r\n"]}